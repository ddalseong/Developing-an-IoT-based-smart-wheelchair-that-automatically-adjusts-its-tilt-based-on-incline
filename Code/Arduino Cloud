#include "thingProperties.h"

//related gps
#include <TinyGPS++.h> //add TinyGPSPULS libarary
#include <SoftwareSerial.h>

//related felldownemail
char HOST_NAME[] = "maker.ifttt.com";
String PATH_NAME = "/trigger/felldownEmail/with/key/bmy2-SjS_ny4gTfR6XT_7P";

#define IFTTT_Key "bmy2-SjS_ny4gTfR6XT_7P"
#define IFTTT_Event "felldownEmail"

String IFTTT_Value1;
String defaultDomain = "https://maps.google.com/?q=";

WiFiClient client;

//related felldownsms
String PATH_NAME2 = "/trigger/felldownSMS/with/key/bmy2-SjS_ny4gTfR6XT_7P";

#define IFTTT_Key "bmy2-SjS_ny4gTfR6XT_7P"
#define IFTTT_Event "felldownSMS"

//related gps
static const int RXPin = D11, TXPin = D12; //GPS TXPIN = D11 PIN  GPS RXPIN = D12 PIN
static const uint32_t GPSBaud = 9600;

char gpsChar; // save GPS value
double wheelchairLocation[2]= {0,0}; // 0 : Latitude , 1 : Longitude

TinyGPSPlus gpsSensor; //base
SoftwareSerial gs(RXPin, TXPin); //gpsSerial

String Lat = "";
String Long = "";


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  gs.begin(GPSBaud);
  felldown = false;
  
}

char message;
int Ure=0;
int Dre=0;

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  while(gs.available()>0){
    gpsChar = gs.read();
    
    gpsSensor.encode(gpsChar);
    if(gpsSensor.location.isValid()){
      //Latitude in degrees(double)
      wheelchairLocation[0] = gpsSensor.location.lat();
      wheelchairLocation[1] = gpsSensor.location.lng();
      
      gpsLocation = {wheelchairLocation[0],wheelchairLocation[1]};
      break;
    }
  }
  
  if(Serial.available()){
    message = (char)Serial.read();
    switch(message){
      case 'D' :
        Dre++;
        if(Dre >= 5){
          felldown =true;
          Ure =0;
          if(Dre == 500 || Dre == 2000){
            pushEmail();
          }
        }
        break;         
      case 'U' :
        Ure++;
        if(Ure >=5){
          felldown = false;
          Dre =0;
        }
        break;        
    }
  }
  
}


/*
  Since GpsLocation is READ_WRITE variable, onGpsLocationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGpsLocationChange()  {
  // Add your code here to act upon GpsLocation change
}

/*
  Since Felldown is READ_WRITE variable, onFelldownChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFelldownChange()  {
  // Add your code here to act upon Felldown change
}

void pushEmail(){
  
  if (client.connect(HOST_NAME, 80)) {
    // if connected:
  }
  else {// if not connected:
  }
  
  Lat = String(wheelchairLocation[0],6);
  Long =String(wheelchairLocation[1],6);
  
  //dtostrf(wheelchairLocation[0],9,5,Lat);   // change char Lat[] = "";
  //dtostrf(wheelchairLocation[1],9,5,Long);  // change char Long[] = "";
  
  // make a HTTP request:
  // send HTTP header
  String queryString = "?value1=";
  queryString += defaultDomain + Lat + "," + Long;
  client.println("GET " + PATH_NAME + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println(); // end HTTP header


  while (client.connected()) {
    if (client.available()) {
      //read an incoming byte from the server and print it to serial monitor:
      char c = client.read();
    }
  }
    
  client.stop();
  ////
  if (client.connect(HOST_NAME, 80)) {
    // if connected:
  }
  else {// if not connected:
  }

  client.println("GET " + PATH_NAME2 + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println(); // end HTTP header
  
  while (client.connected()) {
    if (client.available()) {
      //read an incoming byte from the server and print it to serial monitor:
      char c = client.read();
    }
  }
  client.stop();
}
