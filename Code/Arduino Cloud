/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 3"
  https://create.arduino.cc/cloud/things/a11c480b-c533-44b9-acff-9dde9bdc62cc 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLocation gpsLocation;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//related gps
#include <TinyGPS++.h> //add TinyGPSPULS libarary
#include <SoftwareSerial.h>

//related email
char HOST_NAME[] = "maker.ifttt.com";
String PATH_NAME = "/trigger/webhook_test/with/key/bmy2-SjS_ny4gTfR6XT_7P";

#define IFTTT_Key "bmy2-SjS_ny4gTfR6XT_7P"
#define IFTTT_Event "webhook_test"

String IFTTT_Value1;
String defaultDomain = "https://maps.google.com/?q=";

WiFiClient client;

//////////related gps
static const int RXPin = D11, TXPin = D12; //GPS TXPIN = D1 PIN  GPS RXPIN = D2 PIN
static const uint32_t GPSBaud = 9600;

char gpsChar; // save GPS value
double wheelchairLocation[2]= {0,0}; // 0 : Latitude , 1 : Longitude

TinyGPSPlus gpsSensor; //base
SoftwareSerial gs(RXPin, TXPin); //gpsSerial

char Lat[] = "";
char Long[] = "";


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  gs.begin(GPSBaud);
   
   
}

char felldown = '1';

void loop() {
  ArduinoCloud.update();
  // Your code here 
  if(Serial.available()){
    felldown = (char)Serial.read();
  }
  if(felldown=='1'){
    pushEmail();
    felldown = '0';
  }
  
  //related gps
  while(gs.available()>0){
    gpsChar = gs.read();
    
    gpsSensor.encode(gpsChar);
    if(gpsSensor.location.isValid()){
      //Latitude in degrees(double)
      wheelchairLocation[0] = gpsSensor.location.lat();
      wheelchairLocation[1] = gpsSensor.location.lng();
      
      gpsLocation = {wheelchairLocation[0],wheelchairLocation[1]};
      break;
    }
  }
}



/*
  Since GpsLocation is READ_WRITE variable, onGpsLocationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGpsLocationChange()  {
  // Add your code here to act upon GpsLocation change
}




void pushEmail(){
  
  if (client.connect(HOST_NAME, 80)) {
    // if connected:
  }
  else {// if not connected:
  }  
  
  
  dtostrf(wheelchairLocation[0],9,5,Lat);
  dtostrf(wheelchairLocation[1],9,5,Long);
  
  // make a HTTP request:
  // send HTTP header
  String queryString = "?value1=";
  queryString += defaultDomain + Lat + "," + Long;
  client.println("GET " + PATH_NAME + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println(); // end HTTP header


  while (client.connected()) {
    if (client.available()) {
      //read an incoming byte from the server and print it to serial monitor:
      char c = client.read();
    }
  }
    
  client.stop();
  
}
