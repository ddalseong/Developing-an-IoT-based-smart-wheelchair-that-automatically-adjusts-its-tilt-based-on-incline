#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_ADXL345_U.h>
#include <NewPing.h>

Adafruit_ADXL345_Unified accel = Adafruit_ADXL345_Unified(12345);

// 센서 및 릴레이 핀 정의
const int pressureSensor = A0;
const int safetyBeltSwitch = 2;
const int tiltSensor = 3;
const int lightSensor = A2;
const int speedSensor = 4;
const int TRIGGER_PIN = 5;
const int ECHO_PIN = 6;
const int ledPin = 15;

const int relay1 = 7;
const int relay2 = 8;
const int relay3 = 9;
const int relay4 = 10;
const int relay5 = 11;
const int relay6 = 12;
const int relay7 = 13;
const int relay8 = 14;

const float wheelDiameter = 50;                                    // 바퀴 지름 (cm)
const float wheelCircumference = wheelDiameter * 3.141592 / 1000;  //(바퀴 원주 cm)
const int thresholdUphillAngle = 10;                               // 오르막 기울기 임계값 (도)
const int thresholdDownhillAngle = -10;                            // 내리막 기울기 임계값 (도)
const int thresholdSpeed = 8;                                      // 속도 임계값 (km/h)
const int thresholdLight = 100;                                    // 밝기 임계값
const int thresholdLength = 30;                                    // 거리 임계값
const int thresholdUphillFalldownAngle = 20;                       // 오르막 넘어짐 임계값
const int thresholdDownhillFalldownAngle = -30;                    // 내리막 넘어짐 임계값
const int thresholdPressure = 10;                                  // 압력 센서 임계값
const int thresholdSpeedStopTime = 6000;                           //속도센서 정지 임계값

// 속도 측정 변수
unsigned long time, oldtime, delta;
unsigned long lastDetectionTime = 0;
int swval = 0, oldswval = 0;
float currentSpeed = 0;
NewPing sonar(TRIGGER_PIN, ECHO_PIN);

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600);
  Wire.begin();
  if (!accel.begin()) {
    Serial.println("가속도 센서 인식 실패, 재부팅후 인식바람");
    while (1)
      ;
  }

  pinMode(pressureSensor, INPUT);
  pinMode(safetyBeltSwitch, INPUT);
  pinMode(tiltSensor, INPUT);
  pinMode(speedSensor, INPUT);
  pinMode(lightSensor, INPUT);

  for (int i = relay1; i <= relay8; i++) {
    pinMode(i, OUTPUT);
    digitalWrite(i, LOW);
  }

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
}

void loop() {
  int uphillOrDownhill = adjustWheelchairAngle();
  delay(20);
  if (1 && detectFallAndSendAlert() == 0)  // 사용자 착석감지, 넘어짐 감지
  {
    if (uphillOrDownhill == 1)  // 오르막일때
    {
      retractFrontWheels();  // 앞바퀴 늘어남
      delay(20);
    } else if (uphillOrDownhill == 0)  // 내리막일때
    {
      extendFrontWheels();  // 앞바퀴 줄어듬
      delay(20);
    } else if (uphillOrDownhill == 2)  // 경사가 평행할때
    {
      stopFrontWheels();  // 앞바퀴 멈춤
      delay(20);
    }
    int overspeed = detectOverspeedAndStop();
    delay(20);

    if (overspeed == 1 || detectObstacleAndStop() == 1)  // 장애물감지, 속도감지
    {
      applyBrakes();
      delay(20);
      if (overspeed == 1) {
        delay(2000);
        Serial.println("넘어짐 감지됨");
      }
    } else {
      releaseBrakes();
      delay(20);
    }
  } else  // 미착석, 넘어짐 감지시 브레이크
  {
    applyBrakes();
    delay(20);
  }
  controlAutoLight();
  delay(20);
}

// 압력 센서 및 안전벨트 스위치 확인 함수
int checkSafety() {
  return 0;  //사람 앉음 테스트

  if (analogRead(pressureSensor) > thresholdPressure && digitalRead(safetyBeltSwitch) == LOW) {
    return 0;
  } else {

    return 1;
  }
}

// 경사로 기울기 조절 함수
int adjustWheelchairAngle() {
  float angle = calculateAngle();
  bool isTilted = digitalRead(tiltSensor);
  if (angle > thresholdUphillAngle) {  // 오르막
    if (isTilted == 0) {
      return 1;
    } else {
      return 2;
    }
  } else if (angle < thresholdDownhillAngle) {  // 내리막
    if (isTilted == 1) {
      return 0;
    } else {
      return 2;
    }
  } else {  // 경사로 평행
    return 2;
  }
}

// 가속도 센서 값에서 기울기 각도 계산 함수
float calculateAngle() {
  sensors_event_t event;
  accel.getEvent(&event);

  float roll = atan2(event.acceleration.y, event.acceleration.z) * 180 / M_PI;
  float pitch = atan2(-event.acceleration.x, sqrt(event.acceleration.y * event.acceleration.y + event.acceleration.z * event.acceleration.z)) * 180 / M_PI;

  return roll;  //롤 피치 중에 하나 선택
}

// 넘어짐 감지 및 자동 신고 함수
int detectFallAndSendAlert() {
  bool isTilted = digitalRead(tiltSensor);
  float angle = calculateAngle();
  if (((angle > thresholdUphillFalldownAngle) && isTilted == 0) || ((angle < thresholdDownhillFalldownAngle) && isTilted == 1)) {
    sendEmergencyAlert(true);
    return 1;
  } else {
    sendEmergencyAlert(false);
    return 0;
  }
}

// 오토 라이트 제어 함수
void controlAutoLight() {
  int rawLightValue = analogRead(lightSensor);
  //int filteredLightValue = filterNoise(rawLightValue);
  if (rawLightValue < thresholdLight) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }
}

// 장애물 감지 및 충돌 방지/긴급 정지 함수
int detectObstacleAndStop() {
  int distance = sonar.ping_cm();
  if (distance < thresholdLength) {
    return 1;
  } else {
    return 0;
  }
}

// 과속 감지 및 긴급 정지 함수
int detectOverspeedAndStop() {
  measureSpeed();
  checkForStop();
  if (currentSpeed > thresholdSpeed) {
    return 1;
  } else {
    return 0;
  }
}

// 노이즈 필터링 함수
int filterNoise(int rawValue) {
  static int values[10];
  static int index = 0;
  static int sum = 0;

  sum -= values[index];
  values[index] = rawValue;
  sum += values[index];

  index = (index + 1) % 10;

  return sum / 10;
}

// 앞바퀴 길이 축소 함수
void retractFrontWheels() {
  digitalWrite(relay1, HIGH);
  digitalWrite(relay2, LOW);
  digitalWrite(relay3, HIGH);
  digitalWrite(relay4, LOW);
}

// 앞바퀴 길이 확장 함수
void extendFrontWheels() {
  digitalWrite(relay1, LOW);
  digitalWrite(relay2, HIGH);
  digitalWrite(relay3, LOW);
  digitalWrite(relay4, HIGH);
}

// 앞바퀴 멈춤 함수
void stopFrontWheels() {
  digitalWrite(relay1, LOW);
  digitalWrite(relay2, LOW);
  digitalWrite(relay3, LOW);
  digitalWrite(relay4, LOW);
}

// 브레이크 적용 함수
void applyBrakes() {
  digitalWrite(relay5, HIGH);
  digitalWrite(relay6, LOW);
  digitalWrite(relay7, HIGH);
  digitalWrite(relay8, LOW);
}

// 브레이크 해제 함수
void releaseBrakes() {
  digitalWrite(relay5, LOW);
  digitalWrite(relay6, HIGH);
  digitalWrite(relay7, LOW);
  digitalWrite(relay8, HIGH);
}

// 속도 측정 함수
void measureSpeed() {

  swval = digitalRead(speedSensor);
  if (oldswval == LOW && swval == HIGH) {
    time = millis();
    delta = millis() - oldtime;
    currentSpeed = wheelCircumference * 3600 / (float)delta;

    oldtime = time;
  }
  oldswval = swval;
  Serial.println(currentSpeed);
}

void checkForStop() {
  if (millis() - oldtime > thresholdSpeedStopTime) {  // 마지막으로 자석이 감지된 이후 2초 이상 지났으면
    currentSpeed = 0;                                 // 속도를 0으로 초기화
  }
}

// 비상 경보 전송 함수
void sendEmergencyAlert(bool felldown) {
  char message;

  if (felldown) {
    message = 'D';
  } else {
    message = 'U';
  }
  sendMessage(message);
}

// 와이파이 보드로 메세지 전송 함수
void sendMessage(char message) {
  Serial2.println(message);
}
